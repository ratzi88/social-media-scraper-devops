
pipeline {
    agent any
    environment {
        PEM_PATH = '/var/jenkins_home/secrets/testing.pem'
        K8S_PATH = '/home/ubuntu/social-media-scraper/kubernetes'
        K8S_APPLY = 'kubectl apply -f /home/ubuntu/social-media-scraper/kubernetes'
    }
    stages {
        stage("pem  premissions update") {
            steps {
                sh """
                  chmod 600 ${PEM_PATH}
                  chown jenkins:jenkins  ${PEM_PATH}
                  """
            }
       }
        stage("update k8s from git") {
            steps {
                sh """
                ssh -i ${PEM_PATH} ubuntu@3.70.39.129 "cd /home/ubuntu/social-media-scraper && git pull"
                  """
            }
       }

        stage("check k8s state") {
            steps {
                echo "====++++executing A++++===="
                sh """
                ssh -i ${PEM_PATH} ubuntu@3.70.39.129 \
                "kubectl get all \
                && date \
                && pwd"
                """
            }
       }
        stage("delete dockers from ec2") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {

                    echo "====++++executing A++++===="
                    sh """
                    ssh -i ${PEM_PATH} ubuntu@3.70.39.129 \
                    "docker image ls \
                    && docker rmi -f social-media-scraper-backend:latest \
                    && docker rmi -f sframir/social-media-scraper-frontend:latest \
                    && docker image ls "
                    """
                }
            }
       }

        stage("k8s kubectl apply all") {
            steps {
                // echo "====k8s kubectl apply all===="

                sh """
                ssh -i ${PEM_PATH} ubuntu@3.70.39.129 \
                "${K8S_APPLY}/vol-db-pvc.yaml \
                && ${K8S_APPLY}/configmap.yaml \
                && ${K8S_APPLY}/deployment-db.yaml \
                && ${K8S_APPLY}/deployment-backend.yaml \
                && ${K8S_APPLY}/deployment-frontend.yaml \
                && ${K8S_APPLY}/service-db.yaml \
                && ${K8S_APPLY}/service-backend.yaml \
                && ${K8S_APPLY}/service-frontend.yaml" 
                """

                // sh """
                //     ssh -i /var/jenkins_home/secrets/testing.pem ubuntu@3.70.39.129 \
                //     kubectl patch svc kubernetes -p '{"spec": {"externalIPs": ["10.96.0.1"]}}'

                // """
                sh "pwd"
                sleep 40
            }    
        }
        stage("rollout restart deployment") {
            steps {
                sh """
                ssh -i ${PEM_PATH} ubuntu@3.70.39.129 \
                "kubectl rollout restart deployment app-backend-deployment \
                && kubectl rollout restart deployment app-frontend-deployment"
                  """
            }
       }
        stage("check k8s state after apply") {
            steps {
                echo "====++++executing A++++===="
                sleep 10
                sh """
                ssh -i ${PEM_PATH} ubuntu@3.70.39.129 \
                "kubectl get all"
                """
            }
       }  
    }
    post{
        always{
            echo "====++++always++++===="
            cleanWs()
        }
    }   
}