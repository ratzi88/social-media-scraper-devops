pipeline {
    agent any
    stages {

        stage("Setting Jenkins") {
            steps {
                echo "========Set jenkins========"
                sh """
                grep docker /etc/group
                sudo usermod -aG docker jenkins
                sudo chown root:docker /var/run/docker.sock
                sudo chmod 660 /var/run/docker.sock
                """
            }
        }

        stage("Cloning app") {
            steps {
                echo "========app clone========"
                dir("${env.BUILD_NUMBER}/app") {
                    git branch: 'main',
                        credentialsId: '49bd9cd6-738c-4792-a6aa-fc25cffb434c',
                        url: 'https://github.com/ratzi88/social-media-scraper'
                }
            }
        }
        stage("apt update upgrade") {
            steps {
                sh "sudo apt update && sudo apt upgrade -y"
            }
        }
        stage("Verifications") {
            parallel {
                stage("Python Installing") {
                    steps {
                        sh "sudo apt install python3.11 -y"
                    }
                }
                stage("Curl Installing") {
                    steps {
                        sh """
                        if ! dpkg -l | grep -q curl; then
                            echo "curl not found, installing..."
                            sudo apt install curl -y
                        else
                            echo "curl is already installed, skipping installation."
                        fi
                        """
                    }
                }
            }
        }
        stage("Docker run MongoDB") {
            steps {
                dir("${env.BUILD_NUMBER}/app/") {
                    sh """
                    docker run --name mongodb -d -p 27017:27017 \
                    -v mongodb_data:/data/db \
                    --network jenkins_env \
                    -v init-capped-collection.js:/docker-entrypoint-initdb.d/init-capped-collection.js \
                    mongo:5.0
                    """
                    sleep 10
                }
            }
        }
        stage("Docker app build") {
            steps {
                dir("${env.BUILD_NUMBER}/app/backend") {
                    sh "docker build -t sframir/social-media-scraper:${env.BUILD_NUMBER} ."
                }
            }
        }
        stage("Docker run validation") {
            steps {
                dir("${env.BUILD_NUMBER}/app/backend") {
                    sh """
                    docker run -d -p 5000:5000 \
                    --network jenkins_env \
                    --name sframir/social-media-scraper_${env.BUILD_NUMBER} \
                    -e MONGO_URI='mongodb://mongodb:27017/social_media' \
                    social-media-scraper:${env.BUILD_NUMBER}
                    """
                }
            }
        }
        stage("Sanity test") {
            steps {
                dir("${env.BUILD_NUMBER}/app/frontend") {
                    retry(3) {
                        sleep 5
                        script {
                            // Capture the output of the curl command
                            def response = sh(script: """
                                curl -X POST -H "Content-Type: application/json" \
                                -d '{"name": "Hothaifa Zoubi"}' \
                                http://social-media-scraper_${env.BUILD_NUMBER}:5000/search
                            """, returnStdout: true).trim()
                            echo response
                            // Check if the response contains the expected LinkedIn URL
                             if (response.contains('"linkedin": "https://il.linkedin.com/in/hothaifa-zoubi-894b10223"')) {
                                echo "Sanity passed: Hodi LinkedIn was found: https://il.linkedin.com/in/hothaifa-zoubi-894b10223"
                            } else {
                                error "Validation failed: LinkedIn URL not found in response."
                            }
                        }
                    }
                }
            }
            post {
                always {
                    echo "====++++always++++===="
                    sh """
                    docker stop sframir/social-media-scraper_${env.BUILD_NUMBER}
                    docker rm sframir/social-media-scraper_${env.BUILD_NUMBER}
                    docker stop mongodb
                    docker rm mongodb
                    """
                }
                failure {
                    echo "====++++only when failed++++===="
                }
            }
        }
        stage("Docker push to Docker Hub") {
            steps {
                sh """
                docker tag sframir/social-media-scraper:${env.BUILD_NUMBER} sframir/social-media-scraper:${env.BUILD_NUMBER}
                docker push sframir/social-media-scraper:${env.BUILD_NUMBER}
                docker tag sframir/social-media-scraper:${env.BUILD_NUMBER} sframir/social-media-scraper:latest
                docker push sframir/social-media-scraper:latest
                """
            }
            post {
                always {
                    sh "docker rmi sframir/social-media-scraper:${env.BUILD_NUMBER}"
                }
            }
        }
        stage("Docker frontend app build") {
            steps {
                script {
                    if (params.build_frontend) {
                        dir("${env.BUILD_NUMBER}/app/frontend") {
                            sh "docker build -t sframir/social-media-scraper_frontend:${env.BUILD_NUMBER} ."
                        }
                    } else {
                        echo 'NOT building the frontend docker'
                    }
                }
            }
        }
        stage("Docker frontend run validation") {
            steps {
                script {
                    if (params.build_frontend) {
                        dir("${env.BUILD_NUMBER}/app/frontend") {
                            sh """
                            docker run -d -p 3000:80 \
                            --network jenkins_env \
                            --name sframir/social-media-scraper_frontend_${env.BUILD_NUMBER} \
                            -e MONGO_URI='mongodb://mongodb:27017/social_media' \
                            social-media-scraper_frontend:${env.BUILD_NUMBER}
                            """
                        }
                    } else {
                        echo 'NOT running the frontend docker'
                    }
                }
            }
        }
        stage("Docker frontend push to Docker Hub") {
            steps {
                script {
                    if (params.build_frontend) {
                        sh """
                        docker tag sframir/social-media-scraper_frontend:${env.BUILD_NUMBER} sframir/social-media-scraper_frontend:${env.BUILD_NUMBER}
                        docker push sframir/social-media-scraper_frontend:${env.BUILD_NUMBER}
                        docker tag sframir/social-media-scraper_frontend:${env.BUILD_NUMBER} sframir/social-media-scraper_frontend:latest
                        docker push sframir/social-media-scraper_frontend:latest
                        """
                        sh """
                        docker stop sframir/social-media-scraper_frontend_${env.BUILD_NUMBER}
                        docker rm sframir/social-media-scraper_frontend_${env.BUILD_NUMBER}
                        """
                        sh "docker rmi sframir/social-media-scraper_frontend:${env.BUILD_NUMBER}"
                    } else {
                        echo 'NOT pushing the frontend docker'
                    }
                }
            }
        }
    }
    post {
        always{
            echo "====++++clean workspace++++===="
            cleanWs()
        }
        success {
            echo "========social-media-ci successfully completed========"
            build wait: false, propagate: false, 
                job: 'CD-social-media-scraper', waitForStart: true
        }
        failure {
            echo "========CI failed========"
        }
    }
}